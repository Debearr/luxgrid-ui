name: PR Preview Smoke

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  preview-smoke:
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Checkout
        uses: actions/checkout@v4

      - name: 🤖 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-audit --no-fund
          fi

      - name: 🔎 Determine PR branch
        id: pr
        run: echo "name=${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT

      - name: 🌐 Fetch latest Vercel preview URL
        id: preview
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const ref = context.payload.pull_request.head.ref;
            const deployments = await github.paginate(github.rest.repos.listDeployments, { owner, repo, ref, per_page: 100 });
            if (!deployments.length) {
              core.setFailed(`No deployments found for ref ${ref}`);
              return;
            }
            // Find the most recent deployment and get its latest status
            deployments.sort((a,b)=> new Date(b.created_at) - new Date(a.created_at));
            for (const d of deployments) {
              const statuses = await github.rest.repos.listDeploymentStatuses({ owner, repo, deployment_id: d.id, per_page: 100 });
              const success = statuses.data.find(s => s.state === 'success' && (s.environment === 'Preview' || true));
              const chosen = success || statuses.data[0];
              const url = chosen?.environment_url || chosen?.target_url || d?.original_environment || d?.url;
              if (url) { core.setOutput('url', url); return; }
            }
            core.setFailed('Could not resolve a preview URL');

      - name: 🧪 Run preview smoke
        id: smoke
        continue-on-error: true
        run: bash tests/smoke/health.spec.sh "${{ steps.preview.outputs.url }}"

      - name: 💬 Comment result
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const success = '${{ steps.smoke.outcome }}' === 'success';
            const url = '${{ steps.preview.outputs.url }}';
            const body = success ? `✅ Preview smoke passed\nURL: ${url}` : `❌ Preview smoke failed\nURL: ${url}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo,
              issue_number: context.payload.pull_request.number, body
            });

      - name: ❌ Fail if smoke failed
        if: steps.smoke.outcome != 'success'
        run: exit 1