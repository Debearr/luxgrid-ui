import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const repoRoot = path.resolve(__dirname, '..');
const publicDir = path.join(repoRoot, 'public');

async function ensureDir(dirPath) {
  await fs.mkdir(dirPath, { recursive: true });
}

async function readJson(filePath) {
  try {
    const raw = await fs.readFile(filePath, 'utf8');
    return JSON.parse(raw);
  } catch {
    return null;
  }
}

async function writeFileIfChanged(filePath, content) {
  try {
    const existing = await fs.readFile(filePath, 'utf8');
    if (existing === content) {
      return { changed: false, filePath };
    }
  } catch {
    // File does not exist, will create
  }
  await ensureDir(path.dirname(filePath));
  await fs.writeFile(filePath, content, 'utf8');
  return { changed: true, filePath };
}

function toSlug(value) {
  return String(value || '')
    .trim()
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)+/g, '');
}

function escapeHtml(value) {
  return String(value)
    .replaceAll('&', '&amp;')
    .replaceAll('<', '&lt;')
    .replaceAll('>', '&gt;')
    .replaceAll('"', '&quot;')
    .replaceAll("'", '&#039;');
}

function cssContent(accent = '#8b5cf6') {
  return `/* AUTO-GENERATED BY site-polish */
:root{
  --brand-bg:#0f1117;
  --brand-surface:#121826;
  --brand-text:#e6e9ef;
  --brand-muted:#9aa4b2;
  --brand-accent:${accent};
  --container:1024px;
  --radius:14px;
  --header-h:76px;
  --shadow:0 8px 24px rgba(0,0,0,0.35);
}

*{box-sizing:border-box}
html{scroll-behavior:smooth}
body{
  margin:0;
  background:linear-gradient(180deg, #0b0e14 0%, var(--brand-bg) 100%);
  color:var(--brand-text);
  font:500 16px/1.6 ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,"Apple Color Emoji","Segoe UI Emoji";
  -webkit-font-smoothing:antialiased;
  -moz-osx-font-smoothing:grayscale;
}

a{color:var(--brand-accent); text-decoration:none}
a:hover{text-decoration:underline}

.container{width:100%; max-width:var(--container); margin:0 auto; padding:0 20px}

.header{
  position:sticky; top:0; z-index:50;
  backdrop-filter:saturate(140%) blur(10px);
  background:rgba(18,24,38,0.7);
  border-bottom:1px solid rgba(255,255,255,0.06);
}
.header-inner{
  height:var(--header-h);
  display:flex; align-items:center; justify-content:space-between; gap:16px;
}

.brand{
  display:flex; align-items:center; gap:14px;
}
.brand img{height:28px; width:auto; display:block}
.brand .name{font-weight:700; letter-spacing:0.3px}
.brand .tagline{color:var(--brand-muted); font-weight:500; font-size:14px}

.nav{display:flex; gap:16px}
.nav a{
  color:var(--brand-text);
  opacity:0.85;
  padding:10px 12px;
  border-radius:10px;
}
.nav a:hover{opacity:1; background:rgba(255,255,255,0.06); text-decoration:none}

main{padding:28px 0 72px}
.hero{
  margin-top:14px;
  border:1px solid rgba(255,255,255,0.06);
  background:linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01));
  border-radius:var(--radius);
  box-shadow:var(--shadow);
}
.hero-inner{padding:40px}
.hero h1{margin:0 0 12px; font-size:40px; line-height:1.15; letter-spacing:0.2px}
.hero p{margin:0; color:var(--brand-muted); font-size:18px}

.grid{
  display:grid;
  grid-template-columns:repeat(12, 1fr);
  gap:18px;
  margin-top:28px;
}
.card{
  grid-column:span 12;
  border:1px solid rgba(255,255,255,0.06);
  background:rgba(255,255,255,0.03);
  border-radius:var(--radius);
  padding:22px;
}
.card h3{margin:0 0 8px}
.card p{margin:0; color:var(--brand-muted)}

section[id]{scroll-margin-top:calc(var(--header-h) + 16px)}
:target{scroll-margin-top:calc(var(--header-h) + 16px)}

footer{
  border-top:1px solid rgba(255,255,255,0.06);
  color:var(--brand-muted);
  padding:18px 0 40px;
  margin-top:48px;
}

.gallery{display:grid; grid-template-columns:repeat(12, 1fr); gap:16px; margin-top:20px}
.gallery .shot{grid-column:span 12; border-radius:12px; overflow:hidden; border:1px solid rgba(255,255,255,0.08)}
.gallery img{display:block; width:100%; height:auto}

@media (min-width:720px){
  .hero h1{font-size:48px}
  .card{grid-column:span 6}
  .gallery .shot{grid-column:span 6}
}
`;
}

function logoSvg(brandName = 'Noidlux', accent = '#8b5cf6', tagline = 'Quiet luxury interfaces.') {
  const text = escapeHtml(brandName);
  const tag = escapeHtml(tagline);
  return `<!-- AUTO-GENERATED BY site-polish -->
<svg xmlns="http://www.w3.org/2000/svg" width="240" height="64" viewBox="0 0 240 64" role="img" aria-label="${text} logo">
  <defs>
    <linearGradient id="g" x1="0" y1="0" x2="1" y2="1">
      <stop offset="0%" stop-color="${accent}"/>
      <stop offset="100%" stop-color="#6ee7b7"/>
    </linearGradient>
    <filter id="s" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="0" dy="2" stdDeviation="2" flood-color="rgba(0,0,0,0.45)"/>
    </filter>
  </defs>
  <g transform="translate(8,8)" filter="url(#s)">
    <rect x="0" y="0" width="48" height="48" rx="12" fill="url(#g)"/>
    <path d="M14 34 V14 h6 l14 16 V14 h6 v20 h-6 L20 18 v16 h-6z" fill="white"/>
  </g>
  <g transform="translate(68, 14)">
    <text x="0" y="22" font-family=""Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI" font-weight="700" font-size="24" fill="#ffffff" letter-spacing="0.5">` + text + `</text>
    <text x="0" y="42" font-family="Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI" font-weight="500" font-size="12" fill="#cbd5e1">${tag}</text>
  </g>
  <title>${text} — ${tag}</title>
</svg>`;
}

function faviconSvg(accent = '#8b5cf6', brandInitial = 'N') {
  const initial = escapeHtml(brandInitial.slice(0, 1).toUpperCase() || 'N');
  return `<!-- AUTO-GENERATED BY site-polish -->
<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
  <defs>
    <linearGradient id="g" x1="0" y1="0" x2="1" y2="1">
      <stop offset="0%" stop-color="${accent}"/>
      <stop offset="100%" stop-color="#6ee7b7"/>
    </linearGradient>
  </defs>
  <rect x="4" y="4" width="56" height="56" rx="14" fill="url(#g)"/>
  <text x="32" y="40" font-family="Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI" font-size="28" font-weight="800" text-anchor="middle" fill="#0f1117">${initial}</text>
  <title>Favicon</title>
  </svg>`;
}

function buildGalleryHtml(brand) {
  const gallery = Array.isArray(brand.gallery) ? brand.gallery : [];
  if (gallery.length === 0) {
    return `<div class="gallery">
      <figure class="shot">
        <img src="./shot1.jpg" alt="Placeholder: add ./shot1.jpg in /public">
      </figure>
      <figure class="shot">
        <img src="./shot2.jpg" alt="Placeholder: add ./shot2.jpg in /public">
      </figure>
    </div>`;
  }
  const items = gallery.map((item, idx) => {
    const src = escapeHtml(item.src || `shot${idx + 1}.jpg`);
    const alt = escapeHtml(item.alt || `Shot ${idx + 1}`);
    return `<figure class="shot"><img src="./${src}" alt="${alt}"></figure>`;
  });
  return `<div class="gallery">${items.join('')}</div>`;
}

function indexHtml(brand, files) {
  const { name, tagline, email } = brand;
  const heroTitle = brand.hero_title || tagline || 'Quiet luxury interfaces.';
  const heroSubtitle = brand.hero_subtitle || 'We design and build interfaces that feel inevitable.';
  const safeName = escapeHtml(name || 'Noidlux');
  const safeTagline = escapeHtml(tagline || 'Quiet luxury interfaces.');
  const safeHeroTitle = escapeHtml(heroTitle);
  const safeHeroSubtitle = escapeHtml(heroSubtitle);
  const emailHref = email ? `mailto:${escapeHtml(email)}` : '#';
  const year = new Date().getFullYear();

  const galleryHtml = buildGalleryHtml(brand);

  return `<!-- AUTO-GENERATED BY site-polish -->
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1">
  <meta name="theme-color" content="#0f1117">
  <title>${safeName} — ${safeTagline}</title>
  <meta name="description" content="${safeTagline}">
  <meta property="og:title" content="${safeName}">
  <meta property="og:description" content="${safeTagline}">
  <meta property="og:type" content="website">
  <link rel="icon" type="image/svg+xml" href="./${files.favicon}">
  <link rel="preload" as="image" href="./${files.logo}">
  <link rel="stylesheet" href="./styles.css">
</head>
<body>
  <header class="header" role="banner">
    <div class="container header-inner">
      <div class="brand">
        <img src="./${files.logo}" alt="${safeName} logo">
        <div>
          <div class="name">${safeName}</div>
          <div class="tagline">${safeTagline}</div>
        </div>
      </div>
      <nav class="nav" aria-label="Primary">
        <a href="#home">Home</a>
        <a href="#work">Work</a>
        <a href="#about">About</a>
        <a href="#contact">Contact</a>
      </nav>
    </div>
  </header>

  <main role="main">
    <div class="container">
      <section id="home" class="hero" aria-label="Hero">
        <div class="hero-inner">
          <h1>${safeHeroTitle}</h1>
          <p>${safeHeroSubtitle}</p>
        </div>
      </section>

      <section id="work" class="grid" aria-label="Selected work">
        <article class="card">
          <h3>Polished systems</h3>
          <p>Design systems with impeccable ergonomics and modern elegance.</p>
        </article>
        <article class="card">
          <h3>Precision builds</h3>
          <p>Accessible, performant web experiences with quiet confidence.</p>
        </article>
      </section>

      ${galleryHtml}

      <section id="about" class="grid" aria-label="About">
        <article class="card">
          <h3>About ${safeName}</h3>
          <p>${safeTagline}</p>
        </article>
      </section>

      <section id="contact" class="grid" aria-label="Contact">
        <article class="card">
          <h3>Contact</h3>
          <p>
            ${email ? `<a href="${emailHref}">${escapeHtml(email)}</a>` : 'Reach out.'}
          </p>
        </article>
      </section>
    </div>
  </main>

  <footer role="contentinfo">
    <div class="container">
      <small>&copy; ${year} ${safeName}. All rights reserved.</small>
    </div>
  </footer>
</body>
</html>`;
}

async function backupOnce(filePath) {
  try {
    await fs.access(filePath);
  } catch {
    return; // nothing to back up
  }
  const backupPath = filePath.replace(/(\.[a-z]+)$/i, '.backup$1');
  try {
    await fs.access(backupPath);
    return; // backup already exists
  } catch {
    // create backup
  }
  const content = await fs.readFile(filePath, 'utf8');
  await fs.writeFile(backupPath, content, 'utf8');
}

async function main() {
  console.log('> site-polish: start');

  await ensureDir(publicDir);

  // Load brand
  const brandPath = path.join(publicDir, '_brand.json');
  let brand = await readJson(brandPath);
  if (!brand) {
    brand = {
      name: 'Noidlux',
      tagline: 'Quiet luxury interfaces.',
      email: 'hello@noidlux.com'
    };
    await writeFileIfChanged(brandPath, JSON.stringify(brand, null, 2) + '\n');
    console.log(`  created brand file: ${path.relative(repoRoot, brandPath)}`);
  }

  // Derive palette
  const accent = brand.accent || '#8b5cf6';
  const slug = toSlug(brand.name || 'brand');
  const logoFile = `logo-${slug}.svg`;
  const faviconFile = 'favicon.svg';

  // Write CSS
  const cssPath = path.join(publicDir, 'styles.css');
  const cssRes = await writeFileIfChanged(cssPath, cssContent(accent));
  if (cssRes.changed) console.log(`  wrote ${path.relative(repoRoot, cssRes.filePath)}`);

  // Write logo + favicon
  const logoPath = path.join(publicDir, logoFile);
  const logoRes = await writeFileIfChanged(logoPath, logoSvg(brand.name, accent, brand.tagline));
  if (logoRes.changed) console.log(`  wrote ${path.relative(repoRoot, logoRes.filePath)}`);

  const faviconPath = path.join(publicDir, faviconFile);
  const favRes = await writeFileIfChanged(faviconPath, faviconSvg(accent, (brand.name || 'N')[0]));
  if (favRes.changed) console.log(`  wrote ${path.relative(repoRoot, favRes.filePath)}`);

  // Write index.html (backup existing once)
  const indexPath = path.join(publicDir, 'index.html');
  await backupOnce(indexPath);
  const htmlRes = await writeFileIfChanged(
    indexPath,
    indexHtml(brand, { logo: logoFile, favicon: faviconFile })
  );
  if (htmlRes.changed) console.log(`  wrote ${path.relative(repoRoot, htmlRes.filePath)}`);

  console.log('> site-polish: done');
}

main().catch((err) => {
  console.error('site-polish error:', err?.stack || err?.message || err);
  process.exitCode = 1;
});

